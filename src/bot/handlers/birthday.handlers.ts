import { Telegraf } from "telegraf";
import { AuthContext } from "../middleware/auth.middleware";
import { ValidationContext } from "../middleware/validation.middleware";
import {
  createBirthday,
  getBirthdayById,
  updateBirthday,
  deleteBirthday,
} from "../../database/models/birthday.model";
import {
  createCategorySelectionKeyboard,
  createBirthdayActionsKeyboard,
  createEditBirthdayKeyboard,
  createDeleteConfirmationKeyboard,
} from "../keyboards/birthday.keyboards";
import {
  validateDateString,
  validateName,
  validateCategory,
} from "../../utils/validators";
import {
  parseDate,
  formatDate,
  calculateAge,
  formatBirthdayMessage,
} from "../../utils/helpers";

type BirthdayContext = AuthContext & ValidationContext;

export function registerBirthdayHandlers(bot: Telegraf<BirthdayContext>) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  bot.action(/^category:(\w+)$/, async (ctx) => {
    const category = ctx.match[1];
    const validation = validateCategory(category);

    if (!validation.isValid) {
      await ctx.answerCbQuery("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è");
      return;
    }

    ctx.session?.setData?.("category", category);
    ctx.session?.setState?.("adding_birthday_notes");

    await ctx.editMessageText(ctx.t("birthday.enterNotes"), {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "birthday:skip_notes" }],
          [{ text: ctx.t("common.cancel"), callback_data: "menu:main" }],
        ],
      },
    });
  });

  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏
  bot.action("birthday:skip_notes", async (ctx) => {
    await saveBirthday(ctx);
  });

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
  bot.action("birthday:save", async (ctx) => {
    await saveBirthday(ctx);
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
  bot.action(/^birthday:view:(\d+)$/, async (ctx) => {
    const birthdayId = parseInt(ctx.match[1], 10);
    await showBirthdayDetails(ctx, birthdayId);
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
  bot.action(/^birthday:edit:(\d+)$/, async (ctx) => {
    const birthdayId = parseInt(ctx.match[1], 10);
    await showEditOptions(ctx, birthdayId);
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
  bot.action(/^birthday:delete:(\d+)$/, async (ctx) => {
    const birthdayId = parseInt(ctx.match[1], 10);
    await showDeleteConfirmation(ctx, birthdayId);
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  bot.action(/^birthday:confirm_delete:(\d+)$/, async (ctx) => {
    const birthdayId = parseInt(ctx.match[1], 10);
    await confirmDelete(ctx, birthdayId);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
  bot.action(/^edit:(name|date|category|notes):(\d+)$/, async (ctx) => {
    const field = ctx.match[1];
    const birthdayId = parseInt(ctx.match[2], 10);
    await startEditingField(ctx, field, birthdayId);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bot.on("text", async (ctx) => {
    const state = ctx.session?.state;

    if (!state) return;

    switch (state) {
      case "adding_birthday_name":
        await handleNameInput(ctx);
        break;
      case "adding_birthday_date":
        await handleDateInput(ctx);
        break;
      case "adding_birthday_notes":
        await handleNotesInput(ctx);
        break;
      case "editing_name":
        await handleEditName(ctx);
        break;
      case "editing_date":
        await handleEditDate(ctx);
        break;
      case "editing_notes":
        await handleEditNotes(ctx);
        break;
    }
  });
}

async function handleNameInput(ctx: BirthdayContext) {
  const name = ctx.message?.text?.trim();

  if (!name) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è");
    return;
  }

  const validation = validateName(name);
  if (!validation.isValid) {
    await ctx.reply(`‚ùå ${ctx.t(validation.error!)}`);
    return;
  }

  ctx.session?.setData?.("name", validation.value);
  ctx.session?.setState?.("adding_birthday_date");

  await ctx.reply(ctx.t("birthday.enterDate"), {
    reply_markup: {
      inline_keyboard: [
        [{ text: ctx.t("common.cancel"), callback_data: "menu:main" }],
      ],
    },
  });
}

async function handleDateInput(ctx: BirthdayContext) {
  const dateStr = ctx.message?.text?.trim();

  if (!dateStr) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É");
    return;
  }

  const validation = validateDateString(dateStr);
  if (!validation.isValid) {
    await ctx.reply(`‚ùå ${ctx.t(validation.error!)}`);
    return;
  }

  ctx.session?.setData?.("birthDate", validation.value);

  await ctx.reply(ctx.t("birthday.selectCategory"), {
    reply_markup: createCategorySelectionKeyboard(ctx.t),
  });
}

async function handleNotesInput(ctx: BirthdayContext) {
  const notes = ctx.message?.text?.trim();
  ctx.session?.setData?.("notes", notes || "");
  await saveBirthday(ctx);
}

async function saveBirthday(ctx: BirthdayContext) {
  try {
    const sessionData = ctx.session?.getData?.();
    const { name, birthDate, category, notes } = sessionData;

    if (!name || !birthDate || !category) {
      await ctx.reply("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
      return;
    }

    const birthday = await createBirthday({
      name,
      birthDate: new Date(birthDate),
      category,
      notes: notes || "",
      userId: ctx.user.id,
    });

    ctx.session?.clearState?.();

    const age = calculateAge(birthday.birthDate);
    const message =
      `‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
      `üë§ ${birthday.name}\n` +
      `üìÖ ${formatDate(birthday.birthDate, ctx.language)}\n` +
      `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${age}\n` +
      `üìÇ ${ctx.t(`birthday.categories.${category}`)}\n` +
      (notes ? `üìù ${notes}\n` : "");

    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: ctx.t("menu.addBirthday"),
              callback_data: "menu:add_birthday",
            },
          ],
          [
            {
              text: ctx.t("menu.myBirthdays"),
              callback_data: "menu:my_birthdays",
            },
          ],
          [{ text: ctx.t("common.back"), callback_data: "menu:main" }],
        ],
      },
    });
  } catch (error) {
    console.error("Error saving birthday:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
  }
}

async function showBirthdayDetails(ctx: BirthdayContext, birthdayId: number) {
  try {
    const birthday = await getBirthdayById(birthdayId);

    if (!birthday || birthday.userId !== ctx.user.id) {
      await ctx.answerCbQuery("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    const age = calculateAge(birthday.birthDate);
    const message =
      `üë§ ${birthday.name}\n` +
      `üìÖ ${formatDate(birthday.birthDate, ctx.language)}\n` +
      `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${age}\n` +
      `üìÇ ${ctx.t(`birthday.categories.${birthday.category}`)}\n` +
      (birthday.notes ? `üìù ${birthday.notes}\n` : "") +
      `\n${formatBirthdayMessage(birthday, ctx.language)}`;

    await ctx.editMessageText(message, {
      reply_markup: createBirthdayActionsKeyboard(ctx.t, birthdayId),
    });
  } catch (error) {
    console.error("Error showing birthday details:", error);
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
  }
}

async function showEditOptions(ctx: BirthdayContext, birthdayId: number) {
  await ctx.editMessageText("‚úèÔ∏è –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
    reply_markup: createEditBirthdayKeyboard(ctx.t, birthdayId),
  });
}

async function showDeleteConfirmation(
  ctx: BirthdayContext,
  birthdayId: number
) {
  try {
    const birthday = await getBirthdayById(birthdayId);

    if (!birthday || birthday.userId !== ctx.user.id) {
      await ctx.answerCbQuery("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    await ctx.editMessageText(
      `‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?\n\nüë§ ${birthday.name}\nüìÖ ${formatDate(
        birthday.birthDate,
        ctx.language
      )}`,
      {
        reply_markup: createDeleteConfirmationKeyboard(ctx.t, birthdayId),
      }
    );
  } catch (error) {
    console.error("Error showing delete confirmation:", error);
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞");
  }
}

async function confirmDelete(ctx: BirthdayContext, birthdayId: number) {
  try {
    const birthday = await getBirthdayById(birthdayId);

    if (!birthday || birthday.userId !== ctx.user.id) {
      await ctx.answerCbQuery("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    await deleteBirthday(birthdayId);

    await ctx.editMessageText(
      `‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω\n\nüë§ ${birthday.name}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: ctx.t("menu.myBirthdays"),
                callback_data: "menu:my_birthdays",
              },
            ],
            [{ text: ctx.t("common.back"), callback_data: "menu:main" }],
          ],
        },
      }
    );
  } catch (error) {
    console.error("Error deleting birthday:", error);
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
  }
}

async function startEditingField(
  ctx: BirthdayContext,
  field: string,
  birthdayId: number
) {
  ctx.session?.setState?.(`editing_${field}`, { birthdayId });

  const messages = {
    name: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
    date: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
    notes: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏:",
  };

  await ctx.editMessageText(
    messages[field as keyof typeof messages] || "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: ctx.t("common.cancel"),
              callback_data: `birthday:view:${birthdayId}`,
            },
          ],
        ],
      },
    }
  );
}

async function handleEditName(ctx: BirthdayContext) {
  const name = ctx.message?.text?.trim();
  const birthdayId = ctx.session?.getData?.("birthdayId");

  if (!name || !birthdayId) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö");
    return;
  }

  const validation = validateName(name);
  if (!validation.isValid) {
    await ctx.reply(`‚ùå ${ctx.t(validation.error!)}`);
    return;
  }

  try {
    await updateBirthday(birthdayId, { name: validation.value });
    ctx.session?.clearState?.();

    await ctx.reply("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä",
              callback_data: `birthday:view:${birthdayId}`,
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error("Error updating name:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
  }
}

async function handleEditDate(ctx: BirthdayContext) {
  const dateStr = ctx.message?.text?.trim();
  const birthdayId = ctx.session?.getData?.("birthdayId");

  if (!dateStr || !birthdayId) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö");
    return;
  }

  const validation = validateDateString(dateStr);
  if (!validation.isValid) {
    await ctx.reply(`‚ùå ${ctx.t(validation.error!)}`);
    return;
  }

  try {
    await updateBirthday(birthdayId, { birthDate: validation.value });
    ctx.session?.clearState?.();

    await ctx.reply("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä",
              callback_data: `birthday:view:${birthdayId}`,
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error("Error updating date:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
  }
}

async function handleEditNotes(ctx: BirthdayContext) {
  const notes = ctx.message?.text?.trim();
  const birthdayId = ctx.session?.getData?.("birthdayId");

  if (!birthdayId) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö");
    return;
  }

  try {
    await updateBirthday(birthdayId, { notes: notes || "" });
    ctx.session?.clearState?.();

    await ctx.reply("‚úÖ –ó–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä",
              callback_data: `birthday:view:${birthdayId}`,
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error("Error updating notes:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
  }
}
