import { Telegraf } from "telegraf";
import { AuthContext } from "../middleware/auth.middleware";
import { ValidationContext } from "../middleware/validation.middleware";
import { updateUser, deleteUser } from "../../database/models/user.model";
import {
  createLanguageSettingsKeyboard,
  createNotificationToggleKeyboard,
  createTimeSelectionKeyboard,
  createDeleteProfileConfirmationKeyboard,
  createExportOptionsKeyboard,
} from "../keyboards/settings.keyboards";
import { validateTime } from "../../utils/validators";
import { SupportedLanguage } from "../../locales";

type SettingsContext = AuthContext & ValidationContext;

export function registerSettingsHandlers(bot: Telegraf<SettingsContext>) {
  // –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  bot.action("settings:language", async (ctx) => {
    await ctx.editMessageText("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", {
      reply_markup: createLanguageSettingsKeyboard(ctx.t, ctx.user.language),
    });
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
  bot.action(/^settings:set_language:(\w+)$/, async (ctx) => {
    const language = ctx.match[1] as SupportedLanguage;

    try {
      await updateUser(ctx.user.telegramId, { language });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      ctx.user.language = language;
      ctx.language = language;

      await ctx.answerCbQuery("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω");
      await ctx.editMessageText("‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "menu:settings" }],
          ],
        },
      });
    } catch (error) {
      console.error("Error updating language:", error);
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞");
    }
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  bot.action("settings:notifications", async (ctx) => {
    await ctx.editMessageText("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", {
      reply_markup: createNotificationToggleKeyboard(
        ctx.t,
        ctx.user.notificationsEnabled
      ),
    });
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  bot.action(/^settings:toggle_notifications:(true|false)$/, async (ctx) => {
    const enabled = ctx.match[1] === "true";

    try {
      await updateUser(ctx.user.telegramId, { notificationsEnabled: enabled });
      ctx.user.notificationsEnabled = enabled;

      await ctx.answerCbQuery(
        `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
      );
      await ctx.editMessageText("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", {
        reply_markup: createNotificationToggleKeyboard(ctx.t, enabled),
      });
    } catch (error) {
      console.error("Error toggling notifications:", error);
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞");
    }
  });

  // –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  bot.action("settings:notification_time", async (ctx) => {
    await ctx.editMessageText(
      `‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${ctx.user.notificationTime}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:`,
      {
        reply_markup: createTimeSelectionKeyboard(ctx.t),
      }
    );
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
  bot.action(/^settings:set_time:(\d{2}:\d{2})$/, async (ctx) => {
    const time = ctx.match[1];

    try {
      await updateUser(ctx.user.telegramId, { notificationTime: time });
      ctx.user.notificationTime = time;

      await ctx.answerCbQuery("‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
      await ctx.editMessageText(`‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "menu:settings" }],
          ],
        },
      });
    } catch (error) {
      console.error("Error updating notification time:", error);
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞");
    }
  });

  // –ö–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è
  bot.action("settings:custom_time", async (ctx) => {
    ctx.session?.setState?.("setting_custom_time");

    await ctx.editMessageText(
      "‚åö –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data: "settings:notification_time",
              },
            ],
          ],
        },
      }
    );
  });

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  bot.action("settings:export", async (ctx) => {
    await ctx.editMessageText("üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", {
      reply_markup: createExportOptionsKeyboard(ctx.t),
    });
  });

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
  bot.action("export:csv", async (ctx) => {
    await exportUserData(ctx, "csv");
  });

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
  bot.action("export:json", async (ctx) => {
    await exportUserData(ctx, "json");
  });

  // –ò–º–ø–æ—Ä—Ç CSV
  bot.action("settings:import", async (ctx) => {
    ctx.session?.setState?.("importing_csv");

    await ctx.editMessageText(
      "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n" +
        "–§–æ—Ä–º–∞—Ç: –ò–º—è,–î–∞—Ç–∞,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–ó–∞–º–µ—Ç–∫–∏\n" +
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,15.03.1990,friends,–õ—É—á—à–∏–π –¥—Ä—É–≥",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "menu:settings" }],
          ],
        },
      }
    );
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  bot.action("settings:delete_profile", async (ctx) => {
    await ctx.editMessageText(
      "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n" +
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" +
        "‚Ä¢ –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n" +
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n" +
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é\n\n" +
        "–î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!",
      {
        reply_markup: createDeleteProfileConfirmationKeyboard(ctx.t),
      }
    );
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  bot.action("settings:confirm_delete_profile", async (ctx) => {
    try {
      await deleteUser(ctx.user.telegramId);

      await ctx.editMessageText(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω\n\n" +
          "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n" +
          "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Birthday Reminder Pro!\n" +
          "\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
      );
    } catch (error) {
      console.error("Error deleting profile:", error);
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  bot.on("text", async (ctx) => {
    const state = ctx.session?.state;

    if (state === "setting_custom_time") {
      await handleCustomTimeInput(ctx);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
  bot.on("document", async (ctx) => {
    const state = ctx.session?.state;

    if (state === "importing_csv") {
      await handleCSVImport(ctx);
    }
  });
}

async function handleCustomTimeInput(ctx: SettingsContext) {
  const timeStr = ctx.message?.text?.trim();

  if (!timeStr) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è");
    return;
  }

  const validation = validateTime(timeStr);
  if (!validation.isValid) {
    await ctx.reply(
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)"
    );
    return;
  }

  try {
    await updateUser(ctx.user.telegramId, {
      notificationTime: validation.value,
    });
    ctx.user.notificationTime = validation.value;
    ctx.session?.clearState?.();

    await ctx.reply(`‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${validation.value}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "menu:settings" }],
        ],
      },
    });
  } catch (error) {
    console.error("Error updating custom time:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏");
  }
}

async function exportUserData(ctx: SettingsContext, format: "csv" | "json") {
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await ctx.answerCbQuery("üîÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...");

    // TODO: Implement actual export logic
    await ctx.editMessageText(
      `üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ ${format.toUpperCase()} —Ñ–æ—Ä–º–∞—Ç–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "menu:settings" }],
          ],
        },
      }
    );
  } catch (error) {
    console.error("Error exporting data:", error);
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞");
  }
}

async function handleCSVImport(ctx: SettingsContext) {
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    ctx.session?.clearState?.();

    await ctx.reply("üì• –ò–º–ø–æ—Ä—Ç CSV –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "menu:settings" }],
        ],
      },
    });
  } catch (error) {
    console.error("Error importing CSV:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞");
  }
}
